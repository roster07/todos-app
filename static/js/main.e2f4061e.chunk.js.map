{"version":3,"sources":["components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoList","addTodo","event","preventDefault","data","target","newTodo","taskTitle","value","date","time","state","todoList","push","setState","deleteTodo","splice","console","log","this","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","name","Button","className","ListGroup","map","task","index","Item","variant","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQA6EeA,E,kDAzEX,aAAe,IAAD,8BACV,gBAMJC,QAAU,SAACC,GACPA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,OACnBC,EAAU,CACNC,UAAWH,EAAKG,UAAUC,MAC1BC,KAAML,EAAKK,KAAKD,MAChBE,KAAMN,EAAKM,KAAKF,OAIpB,EAAKG,MAAMC,SAASC,KAAKP,GAEzB,EAAKQ,SAAS,CACVF,SAAU,EAAKD,MAAMC,YArBf,EAyBdG,WAAa,SAACb,GAEV,EAAKS,MAAMC,SAASI,OAAOd,EAAMG,OAAOG,MAAO,GAC/C,EAAKM,SAAS,CACVF,SAAU,EAAKD,MAAMC,YA3BzB,EAAKD,MAAQ,CACTC,SAAU,IAHJ,E,qDAgCJ,IAAD,OAEL,OADAK,QAAQC,IAAIC,KAAKR,MAAMC,UAEnB,qCACA,eAACQ,EAAA,EAAD,CAAMC,SAAUF,KAAKlB,QAArB,UACI,eAACmB,EAAA,EAAKE,MAAN,CAAYC,UAAU,qBAAtB,UACI,cAACH,EAAA,EAAKI,MAAN,0BACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,YAAY,eAAeC,KAAK,iBAE9D,eAACR,EAAA,EAAKE,MAAN,CAAYC,UAAU,gBAAtB,UACI,cAACH,EAAA,EAAKI,MAAN,yBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,YAAY,aAAaC,KAAK,YAE5D,eAACR,EAAA,EAAKE,MAAN,CAAYC,UAAU,gBAAtB,UACI,cAACH,EAAA,EAAKI,MAAN,yBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,YAAY,iBAAiBC,KAAK,YAEhE,cAACC,EAAA,EAAD,CAAQH,KAAK,SAASI,UAAU,kBAAhC,qBAKJ,cAACC,EAAA,EAAD,UAEQZ,KAAKR,MAAMC,SAASoB,KAAI,SAACC,EAAMC,GAC3B,OACI,eAACH,EAAA,EAAUI,KAAX,CAA4BC,QAAQ,UAApC,UACMH,EAAK1B,UADX,OAC0B0B,EAAKvB,KAD/B,WAC6CuB,EAAKxB,KAC7C,cAACoB,EAAA,EAAD,CAAQH,KAAK,SAASU,QAAQ,SAASC,QAAS,EAAKtB,WAAYP,MAAO0B,EAAxE,sBAFgBA,e,GA3D1BI,a,MCaRC,MAXf,WACE,OACE,qBAAKT,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,8DACA,cAAC,EAAD,UCEOU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e2f4061e.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport { Form, Button, ListGroup } from \"react-bootstrap\";\n\nclass TodoList extends Component{\n    constructor() {\n        super();\n        this.state = {\n            todoList: [] // default empty array\n        }\n    }\n    // addTodo: add a new task inside the state\n    addTodo = (event)=> {\n        event.preventDefault(); // stop default behaviour\n        //console.log(event.target.taskTitle.value);\n        const data = event.target,\n        newTodo = {\n            taskTitle: data.taskTitle.value,\n            date: data.date.value,\n            time: data.time.value\n        }\n        //console.log(newTodo);\n        // updating the array but not re-rendering\n        this.state.todoList.push(newTodo);\n        // updating state and re-render\n        this.setState({\n            todoList: this.state.todoList\n        })\n    }\n    // delete todo from the array\n    deleteTodo = (event)=> {\n        // splice(indexNumber, howmanyTodelete)\n        this.state.todoList.splice(event.target.value, 1)\n        this.setState({\n            todoList: this.state.todoList\n        })\n    }\n    render() {\n        console.log(this.state.todoList)\n        return(\n            <>\n            <Form onSubmit={this.addTodo}>\n                <Form.Group controlId=\"formBasicTaskTitle\">\n                    <Form.Label>Task Title:</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter A Task\" name=\"taskTitle\"/>\n                </Form.Group>\n                <Form.Group controlId=\"formBasicDate\">\n                    <Form.Label>Task date:</Form.Label>\n                    <Form.Control type=\"date\" placeholder=\"mm/dd/yyyy\" name=\"date\"/>\n                </Form.Group>\n                <Form.Group controlId=\"formBasicTime\">\n                    <Form.Label>Task Time:</Form.Label>\n                    <Form.Control type=\"time\" placeholder=\"Enter the Time\" name=\"time\"/>\n                </Form.Group>\n                <Button type=\"submit\" className=\"btn btn-success\">\n                    Add+\n                </Button>\n            </Form>\n\n            <ListGroup>\n                {\n                    this.state.todoList.map((task, index)=> {\n                        return(\n                            <ListGroup.Item key={index} variant=\"success\">\n                                 {task.taskTitle} at {task.time}, Date: {task.date}\n                                 <Button type=\"button\" variant=\"danger\" onClick={this.deleteTodo} value={index}>\n                                     Delete\n                                 </Button>\n                            </ListGroup.Item>\n                        )\n                    })\n                }\n            </ListGroup>\n            </>\n        )\n    }\n}\n\nexport default TodoList;","import './App.css';\nimport TodoList from './components/TodoList';\n// bootstrap css\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>TodoList Application Project</h1>\n        <TodoList/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}